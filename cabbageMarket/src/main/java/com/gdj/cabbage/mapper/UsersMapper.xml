<?xml version="1.0" encoding="UTF-8"?>
<!-- 작성자 이재범 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gdj.cabbage.mapper.UsersMapper">
	<!-- 로그인 쿼리 -->
	<select id="loginSession" resultType="java.util.Map" parameterType="com.gdj.cabbage.vo.Users">
		SELECT
			user_id userId,
			email,
			nickname,
			utp.point point
		FROM
			users u LEFT JOIN users_total_point utp ON u.user_id=utp.userId 
		<where>
			email=#{email} AND password=PASSWORD(#{password}) AND user_state=1 AND email != '탈퇴'
		</where>			
	</select>
	
	<!-- 회원가입 쿼리 -->
	<insert id="registerUser" parameterType="com.gdj.cabbage.vo.Users">
		<selectKey keyProperty="userId" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT 
			users(
				username, 
				email, 
				password, 
				nickname, 
				mobile, 
				modify_date, 
				user_state, 
				create_date
				) 
		VALUES(
			#{username}, 
			#{email},
			PASSWORD(#{password}),
			#{nickname},
			#{mobile, jdbcType=VARCHAR},
			NOW(),
			1,
			NOW()
			) 
	</insert>
	
	<!-- email 중복 여부  -->
	<select id="selectEmail" resultType="Integer" parameterType="com.gdj.cabbage.vo.Users">
		SELECT
			COUNT(*)
		FROM
			users
		<where>
			email=#{email}
		</where>
	</select>
	
	<!-- nickname 중복여부 -->
	<select id="selectNickname" resultType="Integer" parameterType="com.gdj.cabbage.vo.Users">
		SELECT
			COUNT(*)
		FROM
			users
		<where>
			nickname=#{nickname}
		</where>
	</select>
		
	<!-- 네이버 아이디 존재 여부 -->
	<select id="selectSnsId" resultType="Integer" parameterType="com.gdj.cabbage.vo.SNSInfo">
		SELECT
			COUNT(*)
		FROM
			sns_info
		<where>
			sns_id=#{id}
		</where>
	</select>
	
	<!--  네이버 정보 sns테이블에 등록 -->
	<insert id="registerNaverUser" parameterType="com.gdj.cabbage.vo.Users">
		INSERT INTO
			sns_info(
				user_id, 
				sns_id, 
				sns_type, 
				sns_name, 
				sns_profile, 
				sns_connect_Date
				) 
		VALUES(
			#{userId}, 
			#{snsId},
			#{snsType},
			#{snsName},
			#{snsProfile},
			NOW()
			) 
	</insert> 
	
	<!-- 네이버 유저 session -->
	<select id="naverLoginSession" resultType="java.util.Map" parameterType="String">
		SELECT
			u.user_id userId,
			u.email,
			u.nickname,
			utp.point point
		FROM
			users u LEFT JOIN sns_info s ON u.user_id=s.user_id JOIN users_total_point utp ON u.user_id=utp.userId
		<where>
			s.sns_id=#{snsId}
		</where>			
	</select>
	
	<!-- 유저 정보 출력 -->
	<select id="selectUserInfo" resultType="java.util.Map" parameterType="Integer">
		SELECT 
			u.username username, 
			u.email email, 
			u.nickname nickname, 
			u.mobile mobile, 
			u.create_date createDate, 
			IFNULL(s.sns_type,'') snsType
		FROM 
			users u LEFT JOIN sns_info s ON u.user_id=s.user_id 
		<where>
			u.user_id=#{userId}
		</where>
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="updateUsers" parameterType="com.gdj.cabbage.vo.Users">
		UPDATE
			users
		SET
			username=#{username},
			password=PASSWORD(#{password}),
			modify_date=NOW(),
			mobile=#{mobile}
		<where>
			user_id=#{userId}
		</where>
	</update>
	
	<!-- 회원 탈퇴 -->
	<update id="deleteUser" parameterType="com.gdj.cabbage.vo.Users">
		UPDATE
			users
		SET
			username='탈퇴',
			email = '탈퇴',
			password = '탈퇴',
			nickname = '탈퇴',
			mobile = '탈퇴',
			modify_date = NOW(),
			mobile = '탈퇴',
			user_state = 0
		<where>
			user_id=#{userId} AND password=PASSWORD(#{password})
		</where>
	</update>
	
	<!-- 회원 탈퇴 -->
	<update id="deleteSnsUser" parameterType="com.gdj.cabbage.vo.Users">
		UPDATE
			users
		SET
			username='탈퇴',
			email = '탈퇴',
			password = '탈퇴',
			nickname = '탈퇴',
			mobile = '탈퇴',
			modify_date = NOW(),
			mobile = '탈퇴',
			user_state = 0
		<where>
			user_id=#{userId}
		</where>
	</update>
	
	<!-- 네이버 sns 회원 정보 탈퇴 -->
	<delete id="deleteSnsInfo" parameterType="com.gdj.cabbage.vo.Users">
		DELETE
		FROM
			sns_info
		<where>
			user_id=#{userId}
		</where>
	</delete>
	
	<!-- sns아이디 조회 -->
	<select id="selectSnsUserId" resultType="Integer" parameterType="com.gdj.cabbage.vo.Users">
		SELECT
			COUNT(*)
		FROM
			sns_info
		<where>
			user_id=#{userId}
		</where>
	</select>
	
	<!-- 유저 포인트 사용 내역 조회 -->
	<select id="userPointHistoryList" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT 
			a.content content, 
			a.point point, 
			a.usedDate usedDate 
		FROM		
			(SELECT 
				'충전' content, points point, used_point_date usedDate FROM points_recharge_history WHERE user_id=#{userId} 
			UNION ALL
			SELECT 
				'입찰' content, bpuh.point point, bpuh.create_date usedDate FROM bidding_points_using_history bpuh LEFT JOIN bidding_auction_product bap ON bpuh.bidding_auction_product_id=bap.bidding_auction_product_id WHERE bap.user_id=#{userId} AND bpuh.income_expenditure='지출'
			UNION ALL
			SELECT 
				'유찰' content, bpuh.point point, bpuh.create_date usedDate FROM bidding_points_using_history bpuh LEFT JOIN bidding_auction_product bap ON bpuh.bidding_auction_product_id=bap.bidding_auction_product_id WHERE bap.user_id=#{userId} AND bpuh.income_expenditure='수입'
			UNION ALL
			SELECT 
				'낙찰' content, bpuh.point point, bpuh.create_date usedDate FROM bidding_points_using_history bpuh LEFT JOIN bidding_auction_product bap ON bpuh.bidding_auction_product_id=bap.bidding_auction_product_id JOIN apply_product_sales_delivery apsd ON bap.apply_product_sales_delivery_id=apsd.apply_product_sales_delivery_id WHERE apsd.user_id=#{userId} 
			UNION ALL
			SELECT 
				'판매' content, bpuh.point point, bpuh.create_date usedDate FROM buying_points_using_history bpuh LEFT JOIN apply_product_sales_delivery apsd ON bpuh.apply_product_sales_delivery_id=apsd.apply_product_sales_delivery_id WHERE apsd.user_id=#{userId} 
			UNION ALL
			SELECT 
				'구매' content, bpuh.point point, bpuh.create_date usedDate FROM buying_points_using_history bpuh LEFT JOIN buying_used_product bup ON bpuh.apply_product_sales_delivery_id=bup.apply_product_sales_delivery_id WHERE bup.user_id=#{userId}) a
		<where>
			<if test="content == null">
				content='충전' OR content='유찰' OR content='판매' OR content='입찰' OR content='낙찰' OR content='구매'
			</if>
		
			<if test="content == 1">
				content='충전' OR content='유찰' OR content='판매'
			</if>
			
			<if test="content == 2">
				content='입찰' OR content='낙찰' OR content='구매'
			</if>
		</where>
		ORDER BY 
			usedDate desc
		LIMIT
			#{beginRow},#{rowPerPage}
	</select>
	
	<!-- 유저 포인트 사용 내역 조회 -->
	<select id="userPointHistoryCount" resultType="Integer" parameterType="java.util.Map">
		SELECT 
			COUNT(*)
		FROM		
			(SELECT 
				'충전' content, points point, used_point_date usedDate FROM points_recharge_history WHERE user_id=#{userId} 
			UNION ALL
			SELECT 
				'입찰' content, bpuh.point point, bpuh.create_date usedDate FROM bidding_points_using_history bpuh LEFT JOIN bidding_auction_product bap ON bpuh.bidding_auction_product_id=bap.bidding_auction_product_id WHERE bap.user_id=#{userId} AND bpuh.income_expenditure='지출'
			UNION ALL
			SELECT 
				'유찰' content, bpuh.point point, bpuh.create_date usedDate FROM bidding_points_using_history bpuh LEFT JOIN bidding_auction_product bap ON bpuh.bidding_auction_product_id=bap.bidding_auction_product_id WHERE bap.user_id=#{userId} AND bpuh.income_expenditure='수입'
			UNION ALL
			SELECT 
				'낙찰' content, bpuh.point point, bpuh.create_date usedDate FROM bidding_points_using_history bpuh LEFT JOIN bidding_auction_product bap ON bpuh.bidding_auction_product_id=bap.bidding_auction_product_id JOIN apply_product_sales_delivery apsd ON bap.apply_product_sales_delivery_id=apsd.apply_product_sales_delivery_id WHERE apsd.user_id=#{userId} 
			UNION ALL
			SELECT 
				'판매' content, bpuh.point point, bpuh.create_date usedDate FROM buying_points_using_history bpuh LEFT JOIN apply_product_sales_delivery apsd ON bpuh.apply_product_sales_delivery_id=apsd.apply_product_sales_delivery_id WHERE apsd.user_id=#{userId} 
			UNION ALL
			SELECT 
				'구매' content, bpuh.point point, bpuh.create_date usedDate FROM buying_points_using_history bpuh LEFT JOIN buying_used_product bup ON bpuh.apply_product_sales_delivery_id=bup.apply_product_sales_delivery_id WHERE bup.user_id=#{userId}) a
		<where>
			<if test="content == null">
				content='충전' OR content='유찰' OR content='판매' OR content='입찰' OR content='낙찰' OR content='구매'
			</if>
			
			<if test="content == 1">
				content='충전' OR content='유찰' OR content='판매'
			</if>
			
			<if test="content == 2">
				content='입찰' OR content='낙찰' OR content='구매'
			</if>
		</where>
		ORDER BY 
			usedDate desc
		LIMIT
			#{beginRow},#{rowPerPage}
	</select>
	
	<!-- 포인트 충전 -->
	<insert id="pointRecharge" parameterType="com.gdj.cabbage.vo.PointsRechargeHistory">
		INSERT INTO
			points_recharge_history(
				user_id, 
				points, 
				used_point_date
				) 
		VALUES(
			#{userId}, 
			#{points},
			NOW()
			)
	</insert>
	
	<!-- 세션 갱신 쿼리 -->
	<select id="sessionUpdate" parameterType="Integer" resultType="java.util.Map">
		SELECT
			user_id userId,
			email,
			nickname,
			utp.point point
		FROM
			users u LEFT JOIN users_total_point utp ON u.user_id=utp.userId 
		<where>
			u.user_id=#{userId}
		</where>			
	</select>
	
	<!-- 배송지 추가 쿼리 -->
	<insert id="addAddress" parameterType="com.gdj.cabbage.vo.ShippingAddress">
		INSERT INTO
			shipping_address(
				user_id,
				recipient_name,
				address,
				recipient_phone_number
			)
		VALUES(
			#{userId},
			#{recipientName},
			#{address},
			#{recipientPhoneNumber}
		)
			
	</insert>
	
	<!-- 배송지 출력 쿼리 -->
	<select id="getAddressByUserId" parameterType="Integer" resultType="com.gdj.cabbage.vo.ShippingAddress">
		SELECT
			shipping_address_id shippingAddressId,
			user_id userId,
			recipient_name recipientName,
			address,
			recipient_phone_number recipientPhoneNumber
		FROM
			shipping_address
		<where>
			user_id=#{userId}
		</where>
	</select>
	
	<!-- 배송지 개수 쿼리 -->
	<select id="getAddressCount" parameterType="Integer" resultType="Integer">
		SELECT
			COUNT(*)
		FROM
			shipping_address
		<where>
			user_id=#{userId}
		</where>
	</select>
</mapper>