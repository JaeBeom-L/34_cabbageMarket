<?xml version="1.0" encoding="UTF-8"?>
<!-- 작성자: 김희진 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gdj.cabbage.mapper.UsedTradeMapper">

<!-- 중고상품 목록  -->
	<select id="selectUsedProductList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			 upr.apply_product_sales_delivery_id applyId,
			 img.img_name imgName,
			 apsd.product_name productName,
			 upr.product_price productPrice,
			 cs.category_sub_name categorySubName
		FROM 
			 used_product_registration upr
		LEFT JOIN product_confirmation_registration pcr ON upr.apply_product_sales_delivery_id = pcr.apply_product_sales_delivery_id
		LEFT JOIN apply_product_sales_delivery apsd ON pcr.apply_product_sales_delivery_id = apsd.apply_product_sales_delivery_id
		LEFT JOIN apply_product_sales_delivery_img img ON apsd.apply_product_sales_delivery_id = img.apply_product_sales_delivery_id
		LEFT JOIN category_sub cs ON apsd.category_sub_id = cs.category_sub_id
		LEFT JOIN category_middle cmd ON cs.category_middle_id = cmd.category_middle_id
		LEFT JOIN category_main cm ON cmd.category_main_id = cm.category_main_id
		<where>
				pcr.registration_state = 1 <!-- 1 중고상품 -->
			AND DATEDIFF(upr.registration_deadline, NOW()) > 0 
			<if test="searchWord != null">
				AND apsd.product_name LIKE CONCAT ('%',#{searchWord},'%')
			</if>
			<if test="categoryMainId != null">
				AND cm.category_main_id = #{categoryMainId}
			</if>
		</where>
		GROUP BY 
			productName 
		<choose>
	    <when test="sortBy == 1">ORDER BY upr.product_price, img.img_name </when> <!-- 정렬 낮은가격순 -->
	    <when test="sortBy == 2">ORDER BY upr.product_price DESC, img.img_name </when> <!-- 정렬 높은가격순 -->
	    <otherwise> 
	    	ORDER BY upr.create_date DESC, 
	    	img.img_name
	    </otherwise>
	 	</choose>
		LIMIT #{beginRow}, #{rowPerPage}
	</select>

<!-- 중고상품 total -->
	<select id="selectUsedProductTotal" parameterType="java.util.Map" resultType="Integer">
		SELECT 
			count(*)
		FROM 
			used_product_registration upr
		LEFT JOIN product_confirmation_registration pcr ON upr.apply_product_sales_delivery_id = pcr.apply_product_sales_delivery_id
		LEFT JOIN apply_product_sales_delivery apsd ON pcr.apply_product_sales_delivery_id = apsd.apply_product_sales_delivery_id
		LEFT JOIN category_sub cs ON apsd.category_sub_id = cs.category_sub_id
		LEFT JOIN category_middle cmd ON cs.category_middle_id = cmd.category_middle_id
		LEFT JOIN category_main cm ON cmd.category_main_id = cm.category_main_id
		<where>
				pcr.registration_state = 1 <!-- 1 중고상품 -->
			AND DATEDIFF(upr.registration_deadline, NOW()) > 0
			<if test="searchWord != null">
				AND apsd.product_name LIKE CONCAT ('%',#{searchWord},'%')
			</if>
			<if test="categoryMainId != null">
				AND cm.category_main_id = #{categoryMainId}
			</if>
		</where>
		<choose>
	    <when test="sortBy == 1"> ORDER BY upr.product_price </when>
	    <when test="sortBy == 2"> ORDER BY upr.product_price DESC</when>
	 	</choose>
	</select>
	
<!-- 마감 일주일 남은 상품 6개 보여주기 -->
	<select id="selectDeadlineImminentProduct6" resultType="java.util.Map">
		SELECT 
			upr.apply_product_sales_delivery_id applyId,
			img.img_name imgName,
			apsd.product_name productName,
			upr.product_price productPrice,
			upr.registration_deadline deadline
		FROM 
			used_product_registration upr
		LEFT JOIN product_confirmation_registration pcr ON upr.apply_product_sales_delivery_id = pcr.apply_product_sales_delivery_id
		LEFT JOIN apply_product_sales_delivery apsd ON pcr.apply_product_sales_delivery_id = apsd.apply_product_sales_delivery_id
		LEFT JOIN apply_product_sales_delivery_img img ON apsd.apply_product_sales_delivery_id = img.apply_product_sales_delivery_id
		WHERE
			pcr.registration_state = 1 <!-- 1 중고상품 -->
		AND 
			DATEDIFF(upr.registration_deadline, NOW()) BETWEEN 0 AND 7
		GROUP BY 
			productName 
		ORDER BY 
			RAND()
		LIMIT 6
	</select>
	
<!-- 중고상품 상세  -->
	<select id="selectUsedProductOne" parameterType="Integer" resultType="java.util.Map">
		SELECT 
			upr.apply_product_sales_delivery_id applyId,
			apsd.product_name productName,
			apsd.user_id userId,
			u.nickname nickname,
			upr.product_desc productDesc,
			upr.product_price productPrice,
			LEFT(upr.registration_deadline,16) deadLine,
			cs.category_sub_name categorySubName,
			cmd.category_middle_id categoryMiddleId
		FROM 
			used_product_registration upr
		LEFT JOIN product_confirmation_registration pcr ON upr.apply_product_sales_delivery_id = pcr.apply_product_sales_delivery_id
		LEFT JOIN apply_product_sales_delivery apsd ON pcr.apply_product_sales_delivery_id = apsd.apply_product_sales_delivery_id
		LEFT JOIN users u ON apsd.user_id = u.user_id
		LEFT JOIN category_sub cs ON apsd.category_sub_id = cs.category_sub_id
		LEFT JOIN category_middle cmd ON cs.category_middle_id = cmd.category_middle_id
		WHERE 
			upr.apply_product_sales_delivery_id = #{applyId}
	</select>

<!-- 중고상품 상세 이미지  -->
	<select id="selectUsedProductImg" parameterType="Integer" resultType="String">
		SELECT
			img_name imgName
		FROM 
			apply_product_sales_delivery_img
		WHERE 
			apply_product_sales_delivery_id = #{applyProductSalesDeliveryId}
	</select>
	
<!-- 관련된 중고상품 보여주기 -->
	<select id="selectRelatedUsedProduct" parameterType="Integer" resultType="java.util.Map">
		SELECT 
			cmd.category_middle_id categoryMiddleId,
			cmd.category_middle_name categoryMiddleName,
			apsd.apply_product_sales_delivery_id applyId,
			apsd.apply_product_sales_delivery_id userId,
			apsd.product_name productName,
			img.img_name imgName,
			upr.product_price productPrice
		FROM 
			category_middle cmd
		LEFT JOIN category_sub cs ON cmd.category_middle_id = cs.category_middle_id
		LEFT JOIN apply_product_sales_delivery apsd ON cs.category_sub_id = apsd.category_sub_id
		LEFT JOIN apply_product_sales_delivery_img img ON apsd.apply_product_sales_delivery_id = img.apply_product_sales_delivery_id
		LEFT JOIN product_confirmation_registration pcr ON apsd.apply_product_sales_delivery_id = pcr.apply_product_sales_delivery_id
		LEFT JOIN used_product_registration upr ON apsd.apply_product_sales_delivery_id = upr.apply_product_sales_delivery_id
		WHERE 
			cmd.category_middle_id = #{categoryMiddleId}
		AND 
			pcr.registration_state = 1 <!-- 1 중고상품 -->
		GROUP BY 
			apsd.product_name
		ORDER BY 
			RAND()
		LIMIT 4
	</select>

<!-- 중고상품 등록 -->
	<insert id="insertUsedProduct" parameterType="com.gdj.cabbage.vo.UsedProductRegistration">
		INSERT INTO used_product_registration (
			apply_product_sales_delivery_id,
			product_desc,
			product_price,
			registration_deadline,
			create_date
		)VALUES(
			#{applyProductSalesDeliveryId},
			#{productDesc},
			#{productPrice},
			#{registrationDeadline},
			NOW()
		)
	</insert>
	
	<!-- 배송신청한 상품을 중고상품으로 등록하면 registration_state값이 9[미등록] -> 1[중고상품]로 변경되도록...  -->
	<update id="updateProductRegistrationState" parameterType="com.gdj.cabbage.vo.ProductConfirmationRegistration">
		UPDATE 
			product_confirmation_registration
		SET 
			registration_state = 1 <!-- 1 중고상품 -->
		WHERE 
			apply_product_sales_delivery_id = #{applyProductSalesDeliveryId}
	</update>
		
		
<!-- 중고상품 수정(상품을 올린 회원만 수정 가능) -->
	<update id="updateUsedProduct" parameterType="com.gdj.cabbage.vo.UsedProductRegistration">
		UPDATE 
			used_product_registration 
		SET  
			product_desc = #{productDesc},
			product_price = #{productPrice},
			<if test="registrationDeadline != null">
		      registration_deadline = #{registrationDeadline}
		    </if>
		WHERE  
			apply_product_sales_delivery_id = #{applyProductSalesDeliveryId}
	</update>

<!-- 중고상품 구매 -->
	<!-- 구매할 상품에 대한 정보 select -->
	<select id="selectUsedProductOneForBuy" parameterType="Integer" resultType="java.util.Map">
		SELECT 
			upr.apply_product_sales_delivery_id applyId,
			apsd.product_name productName,
			img.img_name imgName,
			u.nickname nickName,
			upr.product_price productPrice
		FROM 
			used_product_registration upr 
		LEFT JOIN apply_product_sales_delivery apsd ON upr.apply_product_sales_delivery_id = apsd.apply_product_sales_delivery_id 
		LEFT JOIN apply_product_sales_delivery_img img ON apsd.apply_product_sales_delivery_id = img.apply_product_sales_delivery_id
		LEFT JOIN users u ON apsd.user_id = u.user_id
		WHERE 
			apsd.apply_product_sales_delivery_id = #{applyId}
		GROUP BY 
			product_name
	</select>
	
	<!-- 1.구매한 상품이 중고상품구매 테이블에 insert (어느구매자가 어떤상품을 구매했는지...) -->
	<insert id="insertBuyingUsedProduct" parameterType="Integer">
		INSERT INTO buying_used_product(
			apply_product_sales_delivery_id,
			user_id,
			create_date
		)VALUES(
			#{applyProductSalesDeliveryId},
			#{userId},
			NOW()
		)
	</insert>
	
	<!-- 2-0. 수수료율 가져오기 -->
	<select id="selectCommissionRate" resultType="Integer">
		SELECT 
			commission_rate commissionRate
		FROM 
			commission_info
		WHERE 
			commission_info_id = 1
	</select>
	
	<!-- 2-1. 구매 포인트 이용 내역 테이블에 포인트 수입/지출 내역 insert. -->
	<insert id="insertUsingPoint" parameterType="java.util.Map">
		INSERT INTO buying_points_using_history(
			apply_product_sales_delivery_id,
			income_expenditure,
			point,
			create_date
		)VALUES(
			#{applyProductSalesDeliveryId},
			'지출',
			#{exPoint},
			NOW()
		),(
			#{applyProductSalesDeliveryId},
			'수입',
			#{inPoint},
			NOW()
		)
	</insert>
	
	<!-- 3.중고상품 판매 시 판매자가 내야할 수수료 insert -->
	<insert id="insertCommissionsPoint" parameterType="Integer">
		INSERT INTO buying_commissions_history(
			apply_product_sales_delivery_id,
			commission_info_id,
			commission_point,
			create_date
		)VALUES(
			#{applyProductSalesDeliveryId},
			1,
			#{commissionPoint},
			NOW()
		)
	</insert>
	
	<!-- 4.상품 배송지 정보 insert -->
	<insert id="insertProductDeliveryInfo" parameterType="java.util.Map">
		INSERT INTO buying_product_delivery(
			apply_product_sales_delivery_id,
			shipping_address_id,
			delivery_state,
			waybill_number,
			delivery_requests,
			create_date
		)VALUES(
			#{applyProductSalesDeliveryId},
			#{shippingAddressId},
			0,
			null,
			#{deliveryRequests},
			NOW()
		)
	</insert>
	
	<!-- 5.상품확인등록 테이블의 registration_state 1.중고 -> 0.판매로 update -->
	<update id="updateRegistrationState" parameterType="Integer">
		UPDATE 
			product_confirmation_registration
		SET 
			registration_state = 0
		WHERE 
			apply_product_sales_delivery_id = #{applyProductSalesDeliveryId}
	</update>
	
</mapper>